<?php

/**
 * @file
 * Salesforce_webforms installation file.
 */

/**
 * Implements hook_schema().
 */
function salesforce_webforms_schema() {
  $schema['salesforce_webforms_map'] = array(
    'description' => 'Stores Salesforce object mappings',
    'fields' => array(
      'mapid' => array(
        'type' => 'serial',
        'description' => 'Unique identifier for a mapping',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'mapname' => array(
        'type' => 'varchar',
        'description' => 'Machine name of the mapping',
        'not null' => TRUE,
        'default' => '',
        'length' => 32,
      ),
      'nid' => array(
        'type' => 'int',
        'description' => 'The webform {node}.nid',
        'not null' => TRUE,
        'default' => 0,
        'unsigned' => TRUE,
      ),
      'sf_object' => array(
        'type' => 'varchar',
        'description' => 'The API name of the Salesforce reference object',
        'not null' => TRUE,
        'default' => '',
        'length' => 64,
      ),
      'displayorder' => array(
        'type' => 'int',
        'description' => 'The order of the map rules',
        'not null' => TRUE,
        'default' => 0,
        'unsigned' => FALSE,
      ),
    ),
    'primary key' => array('mapid'),
    'indexes' => array(
      'mapid' => array('mapid'),
      'nid' => array('nid'),
    ),
  );

  $schema['salesforce_webforms_field'] = array(
    'description' => 'Stores Salesforce field mappings',
    'fields' => array(
      'fieldmapid' => array(
        'type' => 'serial',
        'description' => 'Unique identifier for a mapping',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'mapid' => array(
        'type' => 'int',
        'description' => 'The parent object map ID',
        'not null' => TRUE,
        'default' => 0,
        'unsigned' => TRUE,
      ),
      'sf_fieldname' => array(
        'type' => 'varchar',
        'description' => 'The API name of the Salesforce field',
        'not null' => TRUE,
        'default' => '',
        'length' => 64,
      ),
      'source_data' => array(
        'type' => 'text',
        'description' => 'The source data',
        'not null' => TRUE,
      ),
      'is_keyfield' => array(
        'type' => 'int',
        'size' => 'tiny',
        'description' => 'Is this field used to look up an existing record to update?',
        'not null' => TRUE,
        'default' => 0,
      ),
      'filter' => array(
        'type' => 'text',
        'description' => 'A filter to be applied to the data',
        'not null' => FALSE,
      ),
      'displayorder' => array(
        'type' => 'int',
        'description' => 'The order of the map rules',
        'not null' => TRUE,
        'default' => 0,
        'unsigned' => TRUE,
      ),
    ),
    'primary key' => array('fieldmapid'),
    'indexes' => array(
      'mapid' => array('mapid'),
    ),
  );

  $schema['salesforce_webforms_key'] = array(
    'description' => 'Stores Salesforce mapped object IDs',
    'fields' => array(
      'keymapid' => array(
        'type' => 'serial',
        'description' => 'Unique identifier for a mapping',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'sid' => array(
        'type' => 'int',
        'description' => 'The submission ID',
        'not null' => TRUE,
      ),
      'mapname' => array(
        'type' => 'varchar',
        'description' => 'The name of the mapping',
        'default' => '',
        'length' => 32,
        'not null' => TRUE,
      ),
      'sfid' => array(
        'type' => 'varchar',
        'description' => 'The Salesforce ID string',
        'default' => '',
        'length' => 64,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('keymapid'),
    'indexes' => array(
      'sid' => array('sid'),
    ),
  );

  $schema['salesforce_webforms_settings'] = array(
    'description' => 'Stores Salesforce mapping settings',
    'fields' => array(
      'settingid' => array(
        'type' => 'serial',
        'description' => 'Unique identifier for a setting',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'type' => 'int',
        'description' => 'The node ID',
        'not null' => TRUE,
      ),
      'suppress_errors' => array(
        'type' => 'int',
        'size' => 'tiny',
        'description' => 'Should error messages be suppressed?',
        'default' => 0,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('settingid'),
    'indexes' => array(
      'nid' => array('nid'),
    ),
  );

  // Create a custom cache table.
  $schema['cache_salesforce_webforms'] = backdrop_get_schema_unprocessed('system', 'cache');

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function salesforce_webforms_uninstall() {
  // Delete the variables we created. Schema should be deleted automatically.
  config_clear('salesforce_webforms.settings', 'salesforce_webforms_cron_min');
  config_clear('salesforce_webforms.settings', 'salesforce_webforms_cron_last');
  config_clear('salesforce_webforms.settings', 'salesforce_webforms_all_picklists');
  config_clear('salesforce_webforms.settings', 'salesforce_webforms_picklists');
  config_clear('salesforce_webforms.settings', 'salesforce_webforms_all_objects');
  config_clear('salesforce_webforms.settings', 'salesforce_webforms_objects');
  config_clear('salesforce_webforms.settings', 'salesforce_webforms_limit_picklists');
  config_clear('salesforce_webforms.settings', 'salesforce_webforms_hide_large_lists');
  config_clear('salesforce_webforms.settings', 'salesforce_webforms_supress_admin_errors');
}
/**
 * Implements hook_update_last_removed().
 */
function salesforce_webforms_update_last_removed() {
  return 7004;
}

/**
 * Migrate salesforce_webforms variables to config.
 */
function salesforce_webforms_update_1000() {
  $config = config('salesforce_webforms.settings');
  $config->set('salesforce_webforms_supress_admin_errors', update_variable_get('salesforce_webforms_supress_admin_errors', array()));
  $config->set('salesforce_webforms_cron_min', update_variable_get('salesforce_webforms_cron_min', 60));
  $config->set('salesforce_webforms_all_picklists', update_variable_get('salesforce_webforms_all_picklists', 1));
  $config->set('salesforce_webforms_picklists', update_variable_get('salesforce_webforms_picklists', array()));
  $config->set('salesforce_webforms_all_objects', update_variable_get('salesforce_webforms_all_objects', 1));
  $config->set('salesforce_webforms_objects', update_variable_get('salesforce_webforms_objects', array()));
  $config->set('salesforce_webforms_limit_picklists', update_variable_get('salesforce_webforms_limit_picklists', 20));
  $config->set('salesforce_webforms_hide_large_lists', update_variable_get('salesforce_webforms_hide_large_lists', 1));
  $config->set('salesforce_webforms_cron_last', update_variable_get('salesforce_webforms_cron_last', 0));
  $config->save();

  update_variable_del('salesforce_webforms_supress_admin_errors');
  update_variable_del('salesforce_webforms_cron_min');
  update_variable_del('salesforce_webforms_all_picklists');
  update_variable_del('salesforce_webforms_picklists');
  update_variable_del('salesforce_webforms_all_objects');
  update_variable_del('salesforce_webforms_objects');
  update_variable_del('salesforce_webforms_limit_picklists');
  update_variable_del('salesforce_webforms_hide_large_lists');
  update_variable_del('salesforce_webforms_cron_last');
}

/**
 * Update timer from config to state
 */
function salesforce_webforms_update_1001() {
  $last_value = config_get('salesforce_webforms.settings', 'salesforce_webforms_cron_last');
  state_set('salesforce_webforms_cron_last', $last_value);
  config_clear('salesforce_webforms.settings', 'salesforce_webforms_cron_last');
  //when config_del() exists (it is labeled as "coming soon", we should delete this config)
}